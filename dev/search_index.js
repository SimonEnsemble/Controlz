var documenterSearchIndex = {"docs":
[{"location":"tfs/#transfer-functions-1","page":"Transfer Functions","title":"transfer functions","text":"","category":"section"},{"location":"tfs/#","page":"Transfer Functions","title":"Transfer Functions","text":"the response [output Y(s)] of a linear, time-invariant system to any input [U(s)] is characterized by a transfer function g(s)=Y(s)U(s).","category":"page"},{"location":"tfs/#constructing-a-transfer-function-1","page":"Transfer Functions","title":"constructing a transfer function","text":"","category":"section"},{"location":"tfs/#","page":"Transfer Functions","title":"Transfer Functions","text":"a data structure, TransferFunction, is used to represent transfer functions.","category":"page"},{"location":"tfs/#","page":"Transfer Functions","title":"Transfer Functions","text":"for example, we can construct the transfer function: g(s)=dfrac5s+1s^2 + 4s+1 in an intuitive way that resembles the algebraic expression:","category":"page"},{"location":"tfs/#","page":"Transfer Functions","title":"Transfer Functions","text":"g = (5 * s + 5) / (s ^ 2 + 4 * s + 5)","category":"page"},{"location":"tfs/#","page":"Transfer Functions","title":"Transfer Functions","text":"alternatively, we can pass the powers of the coefficients of the s variables of g(s) in the numerator and denominator, respectively. The coefficients of the highest powers go first.","category":"page"},{"location":"tfs/#","page":"Transfer Functions","title":"Transfer Functions","text":"g = TransferFunction([5, 5], [1, 4, 5]) # way 2","category":"page"},{"location":"tfs/#","page":"Transfer Functions","title":"Transfer Functions","text":"note that s == TransferFunction([1, 0], [1]).","category":"page"},{"location":"tfs/#","page":"Transfer Functions","title":"Transfer Functions","text":"we can also represent g(s) by specifying its zeros, poles, and gain:","category":"page"},{"location":"tfs/#","page":"Transfer Functions","title":"Transfer Functions","text":"g = zeros_poles_gain([-1.0], [-2 + im, -2 - im], 1.0)  # way 3","category":"page"},{"location":"tfs/#","page":"Transfer Functions","title":"Transfer Functions","text":"the TransferFunction data structure has a numerator (a polynomial), denominator (a polynomial), and time_delay (a number) attribute that we can access.","category":"page"},{"location":"tfs/#","page":"Transfer Functions","title":"Transfer Functions","text":"g = (5 * s + 5) / (s ^ 2 + 4 * s + 5)\ng.numerator # 5s + 1, a `Poly`\ng.denominator # s² + 4s + 5, a `Poly`\ng.time_delay # 0.0, a `Float64`","category":"page"},{"location":"tfs/#","page":"Transfer Functions","title":"Transfer Functions","text":"The numerator and denominator are Poly types from the package Polynomials.jl.","category":"page"},{"location":"tfs/#time-delays-1","page":"Transfer Functions","title":"time delays","text":"","category":"section"},{"location":"tfs/#","page":"Transfer Functions","title":"Transfer Functions","text":"add a time delay to a transfer function as follows. ","category":"page"},{"location":"tfs/#","page":"Transfer Functions","title":"Transfer Functions","text":"θ = 2.0 # time delay\ng = 3 / (2 * s + 1) * exp(-θ * s) # way 1\ng = TransferFunction([3], [2, 1], θ) # way 2","category":"page"},{"location":"tfs/#","page":"Transfer Functions","title":"Transfer Functions","text":"the transfer function g represents: g(s)=dfrac32s+1e^-2s.","category":"page"},{"location":"tfs/#transfer-function-algebra-1","page":"Transfer Functions","title":"transfer function algebra","text":"","category":"section"},{"location":"tfs/#","page":"Transfer Functions","title":"Transfer Functions","text":"we can add +, subject -, mutiply *, and divide / transfer functions.","category":"page"},{"location":"tfs/#","page":"Transfer Functions","title":"Transfer Functions","text":"g1 = 3 / (s + 2)\ng2 = 1 / (s + 4)\ng = g1 * g2","category":"page"},{"location":"tfs/#evaluate-a-transfer-function-at-a-complex-number-1","page":"Transfer Functions","title":"evaluate a transfer function at a complex number","text":"","category":"section"},{"location":"tfs/#","page":"Transfer Functions","title":"Transfer Functions","text":"for example, to evaluate g(s)=dfrac4s+2 at s=1-i:","category":"page"},{"location":"tfs/#","page":"Transfer Functions","title":"Transfer Functions","text":"g = 4 / (s + 2)\nevaluate(g, 2 * im) # 1 - im","category":"page"},{"location":"tfs/#","page":"Transfer Functions","title":"Transfer Functions","text":"see the Julia documentation on imaginary numbers here.","category":"page"},{"location":"tfs/#poles,-zeros-and-gain-of-a-transfer-function-1","page":"Transfer Functions","title":"poles, zeros and gain of a transfer function","text":"","category":"section"},{"location":"tfs/#","page":"Transfer Functions","title":"Transfer Functions","text":"compute the poles, zeros, and gain of a transfer function as follows:","category":"page"},{"location":"tfs/#","page":"Transfer Functions","title":"Transfer Functions","text":"g = (5 * s + 5) / (s ^ 2 + 4 * s + 5)\nz, p, k = zeros_poles_gain(g)\n# z = [-1.0]\n# p = [-2-im, -2+im]\n# k  = 1.0","category":"page"},{"location":"tfs/#","page":"Transfer Functions","title":"Transfer Functions","text":"    TransferFunction\n    zeros_poles_gain\n    evaluate\n    proper\n    strictly_proper","category":"page"},{"location":"tfs/#Controlz.TransferFunction","page":"Transfer Functions","title":"Controlz.TransferFunction","text":"tf = TransferFunction([1, 2], [3, 5, 8])\ntf = TransferFunction([1, 2], [3, 5, 8], 3.0)\n\nConstruct a transfer function representing a linear, time-invariant system.\n\nExample\n\nconstruct the transfer function:\n\nG(s) = frac4e^-22s2s+1\n\njulia> tf = TransferFunction([4], [2, 1], 2.2)\n\nAttributes\n\nnumerator::Poly: the polynomial in the numerator of the transfer function\ndenominator::Poly: the polynomial in the denominator of the transfer function\ntime_delay::Float64: the associated time delay\n\n\n\n\n\n","category":"type"},{"location":"tfs/#Controlz.zeros_poles_gain","page":"Transfer Functions","title":"Controlz.zeros_poles_gain","text":"z, p, k = zeros_poles_gain(tf) # compute the zeros, poles, gain of a `TransferFunction`\n\nCompute the zeros, poles, and gain of a transfer function. \n\nthe gain is computed by evaluating the transfer function G(s) at s = 0.\nthe zeros are computed as the zeros of the numerator of the transfer function.\nthe poles are computed as the zeros of the denominator of the transfer function.\n\nExample\n\njulia> tf = TransferFunction([1], [4, 1])\njulia> z, p, k = zeros_poles_gain(tf) # ([], [-0.25], 1)\n\n\n\ntf = zeros_poles_gain(z, p, k, time_delay=0.0) # construct a `TransferFunction` with given zeros, poles, and gain.\n\nConstruct a TransferFunction by passing an array of the zeros, array of the poles, and a gain.\n\nExample\n\njulia> tf = zeros_poles_gain([], [-0.25], 1) # 1 / (s + 0.25)\n\n\n\n\n\n","category":"function"},{"location":"tfs/#Controlz.evaluate","page":"Transfer Functions","title":"Controlz.evaluate","text":"evaluate(tf, z)\n\nEvaluate a TransferFunction, tf, at a particular number z.\n\nExamples\n\njulia> tf = TransferFunction([1], [3, 1])\njulia> evaluate(tf, 1.0) # 0.25\njulia> evaluate(tf, 2.0 + 3.0im) # also takes imaginary numbers as input\n\n\n\n\n\n","category":"function"},{"location":"tfs/#Controlz.proper","page":"Transfer Functions","title":"Controlz.proper","text":"proper(tf)\n\nReturn true if transfer function tf is proper and false otherwise.\n\n\n\n\n\n","category":"function"},{"location":"tfs/#Controlz.strictly_proper","page":"Transfer Functions","title":"Controlz.strictly_proper","text":"strictly_proper(tf)\n\nReturn true if transfer function tf is strictly proper and false otherwise.\n\n\n\n\n\n","category":"function"},{"location":"sim/#Simulation-1","page":"Simulation","title":"Simulation","text":"","category":"section"},{"location":"sim/#","page":"Simulation","title":"Simulation","text":"we simulate the response (output) of a linear, time-invariant system, characterized by a transfer function g(s), to an input. this simulation is in the time domain.","category":"page"},{"location":"sim/#","page":"Simulation","title":"Simulation","text":"    simulate","category":"page"},{"location":"sim/#Controlz.simulate","page":"Simulation","title":"Controlz.simulate","text":"t, y = simulate(tf, u, tspan, nb_time_points=100) # explicit input function u(t)\nt, y = simulate(Y, tspan, nb_time_points=100) # invert Y(s)\n\nSimulate the output y(t) of an LTI system. simulate handles two scenarios:\n\nwe have the transfer function tf that characterizes how the LTI system responds to inputs and an input function u, an explicit function of time u(t).\nwe have the Laplace transform of the output, Y(s), Y.\n\nArguments\n\ntf::TransferFunction: the transfer function describing the relationship between input u and output y\nY::TransferFunction: the Laplace transform of the output y(t). Usually formed by g(s)U(s), where U(s) is the Laplace transform of the input.\nu::Function: the input function u(t)\ntspan::Tuple{Float64, Float64}: the time span over which to simulate the LTI system.\nnb_time_points::Int=100: the number of time points at which to save the solution y(t)\n\nReturns\n\nt::Array{Float64, 1}: array of times t at which the solution was saved\ny::Array{Float64, 1}: array of y values at corresponding times in t\n\nExample\n\ngiven transfer function tf and input function u\n\nOne can simulate the first order step response as:\n\njulia> tf = 4 / (3 * s + 1)\njulia> u(t) = (t < 0.0) ? 0.0 : 1.0\njulia> t, y = simulate(tf, u, (0.0, 12.0))\n\ngiven Laplace transform of the output, Y\n\nOne can also simulate the first order step response as:\n\njulia> tf = 4 / (3 * s + 1)\njulia> Y = tf / s\njulia> t, y = simulate(Y, (0.0, 12.0))\n\n\n\n\n\n","category":"function"},{"location":"#Controlz.jl-1","page":"Controlz","title":"Controlz.jl","text":"","category":"section"},{"location":"#","page":"Controlz","title":"Controlz","text":"Controlz.jl is a Julia package to explore concepts in the simulation of process dynamics and control of linear, time-invariant (LTI) systems using transfer function representations.","category":"page"},{"location":"#","page":"Controlz","title":"Controlz","text":"For example, consider an LTI system characterized by the transfer function: g(s) = 4  (3s+1).","category":"page"},{"location":"#","page":"Controlz","title":"Controlz","text":"julia> using Controlz\n\njulia> g = 4 / (9 * s ^ 2 + s + 1) # transfer function\n\njulia> z, p, k = zeros_poles_gain(g) # compute zeros, poles, and gain\n\njulia> u = 1 / s # step input\n\njulia> t, y = simulate(g * u, (0.0, 40.0)) # simulate from t = 0 to t = 40\n\njulia> viz_response(t, y, title=\"SO underdamped step response\")","category":"page"},{"location":"#","page":"Controlz","title":"Controlz","text":"(Image: )","category":"page"},{"location":"#install-in-Julia-1","page":"Controlz","title":"install in Julia","text":"","category":"section"},{"location":"#","page":"Controlz","title":"Controlz","text":"in the Julia REPL: go into package mode by typing ]. Then add Controlz#master. Then Backspace to exit package mode.\nin Jupyter Notebook or Julia: using Pkg; Pkg.add(\"Controlz#master\").","category":"page"}]
}
